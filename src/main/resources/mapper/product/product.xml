<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.idle.shoppingmall.mapper.Product.ProductMapper">
    <insert id="saveProduct" useGeneratedKeys="true" keyProperty="product_id">
        insert into product(product_name, product_price, brand_id, product_category,created_who ,created_at, count_love, product_img)
        values ( #{Product.product_name}, #{Product.product_price}, #{Product.brand_id}, #{Product.product_category}, #{Product.created_who}
               ,#{Product.created_at}, 0, #{Product.product_img})
    </insert>

    <select id="findById" parameterType="Long" resultType="com.idle.shoppingmall.Entity.Product.Product">
        select * from product where product_id = #{product_id}
    </select>


    <select id="findAllProducts" resultType="com.idle.shoppingmall.Entity.Product.Product">
        select * from product
    </select>

    <update id="update" parameterType="com.idle.shoppingmall.Entity.Product.Product">
        update product set product_name=#{Product.product_name},
        product_price=#{Product.product_price},
        product_category=#{Product.product_category},
        count_love=#{Product.count_love}  <!-- count_love 필드 업데이트 추가 -->
        where product_id=#{Product.product_id}
    </update>


    <delete id="delete" parameterType="Long">
        delete from product where product_id=#{product_id}
    </delete>

    <select id="findAllProductsPaged" resultType="com.idle.shoppingmall.Entity.Product.Product">
        select * from product
        order by product_id
        limit #{size} offset #{offset}
    </select>


    <select id="findAllByPdPriceDown" resultType="com.idle.shoppingmall.Entity.Product.Product">
        select * from product
        order by product_price asc
        limit #{size} offset #{offset}
    </select>

    <select id="findAllByPdName" resultType="com.idle.shoppingmall.Entity.Product.Product">
        select * from product where product_name like CONCAT('%', #{product_name}, '%') or product_category like CONCAT('%', #{product_name}, '%')
    </select>
    <update id="increaseLoveCount">
        update product set count_love = count_love +1 where product_id = #{produc_id}
    </update>

    <update id="decreaseLoveCount">
        UPDATE product
        SET count_love = CASE WHEN count_love > 0 THEN count_love - 1 ELSE 0 END
        WHERE product_id = #{product_id}
    </update>

    <select id="findAllByLoveCountDesc" resultType="com.idle.shoppingmall.Entity.Product.Product">
        select * from product
        where count_love > 0
        order by count_love desc
        limit #{size}, #{offset}
    </select>

    <select id="findAllBySellCountDesc" resultType="com.idle.shoppingmall.ResponseDTO.Product.ProductSellCountResponse">
        SELECT p.product_id, p.product_name, p.product_price, p.product_category, p.brand_id,
               SUM(pd.pd_sell_count) AS pd_sell_count, p.created_who, p.created_at, p.count_love
        FROM product AS p
                 INNER JOIN product_detail AS pd ON p.product_id = pd.product_id
        GROUP BY p.product_id
        ORDER BY pd_sell_count DESC
        LIMIT #{size}, #{offset};
    </select>

    <select id="findAllByLatestDesc" resultType="com.idle.shoppingmall.ResponseDTO.Product.ProductListResponse">
        select product_id, product_name, product_price, count_love, product_img from product
        order by created_at desc
        LIMIT #{size}, #{offset};
    </select>

    <select id="findAllByComment" resultType="com.idle.shoppingmall.ResponseDTO.Product.ProductCommentListResponse">
        select p.product_id ,p.product_name, p.product_price, product_category, p.count_love,
               count(c.comment_id) as comment_count
        from product as p
                 left join comment as c on p.product_id = c.product_id
        group by p.product_id
        having comment_count > 0
        order by comment_count desc
        limit #{offset}, #{size}
    </select>


    <select id="findByCategory" resultType="com.idle.shoppingmall.Entity.Product.Product">
        select * from product where product_category like CONCAT('%', #{Product.product_category}, '%')
    </select>




    <resultMap id="details" type="com.idle.shoppingmall.ResponseDTO.Manage.detailsObject">
        <result column="size" property="size" />
        <result column="amount" property="amount" />
        <result column="sales" property="sales" />
    </resultMap>
    <resultMap id="ProductDetailViewDTO" type="com.idle.shoppingmall.Controller.ControllerView.ProductViews.DTO.ProductDetailViewDTO">
        <result column="product_id" property="product_id" />
        <result column="product_name" property="product_name" />
        <result column="price" property="price" />
        <result column="brand_name" property="brand_name" />
        <result column="count_love" property="count_love" />
        <result column="category" property="category" />
        <result column="product_img" property="product_img" />
        <collection property="details" ofType="com.idle.shoppingmall.ResponseDTO.Manage.detailsObject" resultMap="details"/>
    </resultMap>
    <select id="findViewById" resultMap="ProductDetailViewDTO">
        SELECT p.product_id as product_id, p.pd_name as product_name, format(p.product_price,0) as price, b.brand_name as brand_name, p.count_love as count_love,
        p.pd_category as category, p.product_img as product_img ,upper(pd.size) as size, pd.pd_before_count as amount, pd.pd_sell_count as sales
        from product as p
        left outer join brand as b on p.brand_id = b.brand_id
        left outer join product_detail as pd on p.product_id = pd.product_id
        <where>
            p.product_id = #{product_id}
        </where>
    </select>

</mapper>